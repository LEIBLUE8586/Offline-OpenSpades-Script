import tkinter as tk
import subprocess
import os
import psutil  # Requires installation via pip install psutil

# Paths (Modify these accordingly)
PY_SNIP_PATH = r"D:\Personal Projects\Coding Project\Ace of Spades Offline Play\PySnip"
OPENSPADES_PATH = r"E:\Games\OpenSpades-0.1.3-Windows/OpenSpades.exe"
CONFIG_PATH = os.path.join(PY_SNIP_PATH, "config.txt")  # Difficulty config file
SERVER_IP = "127.0.0.1"
SERVER_PORT = "32887"

# Global variable to track server process
server_process = None

# Function to check if the server is running
def is_server_running():
    for process in psutil.process_iter(attrs=['pid', 'name', 'cmdline']):
        try:
            if process.info['name'] and "python" in process.info['name'].lower():
                cmdline = " ".join(process.info['cmdline']) if process.info['cmdline'] else ""
                if "run.py" in cmdline or "PySnip" in cmdline:  # Extra check for PySnip
                    return process.info['pid']
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    return None

pid = is_server_running()
print(f"Server PID: {pid if pid else 'Not Found'}")

# Function to start the server
def start_server():
    global server_process
    if is_server_running():
        status_label.config(text="Server is already running!", fg="blue")
        return

    # Save difficulty setting to config file
    with open(CONFIG_PATH, "w") as config_file:
        config_file.write(difficulty_var.get())

    # Ensure correct Python version (modify if needed)
    PYTHON_EXEC = r"C:\Python27\python.exe"  # Adjust to actual Python 2.7 path

    try:
        # Launch the server with correct working directory
        server_process = subprocess.Popen(
            [PYTHON_EXEC, os.path.join(PY_SNIP_PATH, "feature_server", "run.py")],  
            cwd=os.path.join(PY_SNIP_PATH, "feature_server"),  # Ensures correct working directory
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True  # Enables readable output
        )

        # Read server output for debugging
        stdout, stderr = server_process.communicate(timeout=5)
        print("Server STDOUT:", stdout)
        print("Server STDERR:", stderr)

        if stderr:
            status_label.config(text=f"Server Error! Check console.", fg="red")
        else:
            status_label.config(text=f"Server started! (Difficulty: {difficulty_var.get()})", fg="green")

    except FileNotFoundError:
        status_label.config(text="Error: Python 2.7 not found!", fg="red")
    except Exception as e:
        status_label.config(text=f"Failed to start server: {str(e)}", fg="red")


# Function to stop the server
def stop_server():
    server_pid = is_server_running()
    if server_pid:
        subprocess.run(["taskkill", "/F", "/PID", str(server_pid)], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        status_label.config(text="Server stopped.", fg="red")
    else:
        status_label.config(text="No server running.", fg="blue")  # Avoids false errors

# Function to check if OpenSpades is running
def is_game_running():
    for process in psutil.process_iter(attrs=['name']):
        if "OpenSpades.exe" in process.info['name']:
            return True
    return False

# Function to launch OpenSpades
def launch_game():
    if not is_server_running():
        status_label.config(text="Start the server first!", fg="red")
        return
    
    if is_game_running():
        status_label.config(text="Game is already running!", fg="blue")
        return

    subprocess.Popen([OPENSPADES_PATH, "--connect", f"{SERVER_IP}:{SERVER_PORT}"])
    status_label.config(text="Game launched.", fg="green")

# Function to handle window close
def on_close():
    stop_server()  # Ensure server stops when closing GUI
    root.destroy()

# GUI Setup
root = tk.Tk()
root.title("OpenSpades Offline Matchmaking")
root.geometry("300x300")

# Status Label
status_label = tk.Label(root, text="Status: Ready", fg="black")
status_label.pack(pady=5)

# Difficulty Selection
difficulty_var = tk.StringVar(value="normal")  # Default difficulty
difficulty_label = tk.Label(root, text="Select Bot Difficulty:")
difficulty_label.pack(pady=5)
difficulty_menu = tk.OptionMenu(root, difficulty_var, "easy", "normal", "hard")
difficulty_menu.pack(pady=5)

# Start Server Button
btn_start = tk.Button(root, text="Start Server", command=start_server, width=20)
btn_start.pack(pady=10)

# Stop Server Button
btn_stop = tk.Button(root, text="Stop Server", command=stop_server, width=20)
btn_stop.pack(pady=10)

# Launch OpenSpades Button
btn_launch = tk.Button(root, text="Start Game & Join", command=launch_game, width=20)
btn_launch.pack(pady=10)

# Close Window Event
root.protocol("WM_DELETE_WINDOW", on_close)

# Run the GUI
root.mainloop()